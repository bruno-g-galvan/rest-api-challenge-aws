AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  DBInstanceIdentifier:
    Description: The database instance identifier
    Type: String
    Default: rest-api-db-instance
  DBName:
    Description: The name of the database
    Type: String
    Default: RestApiDBInstance
  MasterUsername:
    Description: The master username for the database
    Type: String
    Default: admin
  MasterUserPassword:
    Description: The master password for the database
    Type: String
    Default: adminadmin
    NoEcho: true
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.m5.large
    ConstraintDescription: Must be a valid RDS DB instance class.
  AllocatedStorage:
    Description: The size of the database (Gb)
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 65536
    ConstraintDescription: Must be between 20 and 65536 GB.
  VPCSecurityGroupIds:
    Description: The VPC security groups to assign to the RDS instance
    Type: List<AWS::EC2::SecurityGroup::Id>
    Default: sg-016569f907c4f7c22
  DBSubnetGroupName:
    Description: The subnet group for the database
    Type: String
    Default: default-vpc-09b1c5d0158a329a3
  ProjectName:
    Type: "String"
    Default: "rest-api-test"
  DeploymentBucketName:
    Type: "String"
    Default: "rest-api-deployment-${AWS::AccountId}-us-east-1"
    Description: Enter the existing AWS bucket were the artifacts for deployment are uploaded.

Resources:
  LandingDataBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${ProjectName}-data-landing-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: "datalake"
          Value: !Ref ProjectName

  ArtifactsBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${ProjectName}-artifacts-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Prefix: /
            Status: Enabled
            ExpiredObjectDeleteMarker: True
            NoncurrentVersionExpiration:
              NoncurrentDays: 7
      Tags:
        - Key: "datalake"
          Value: !Ref ProjectName

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBName: !Ref DBName
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref AllocatedStorage
      Engine: "mysql"
      EngineVersion: "8.0.35"
      VPCSecurityGroups: !Ref VPCSecurityGroupIds
      DBSubnetGroupName: !Ref DBSubnetGroupName
      PubliclyAccessible: false
      StorageEncrypted: false
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "07:00-09:00"
      Port: 3306
      OptionGroupName: default:mysql-8-0
      DBParameterGroupName: default.mysql8.0
      MonitoringInterval: 60
      MonitoringRoleArn: "arn:aws:iam::316328384763:role/rds-monitoring-role"
      AutoMinorVersionUpgrade: true
      DeletionProtection: false

#  MyApi:
#    Type: AWS::ApiGateway::RestApi
#    Properties:
#      Name: MyApi
#      Description: A simple API Gateway
#
#  MyResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId: !GetAtt MyApi.RootResourceId
#      PathPart: myresource
#      RestApiId: !Ref MyApi
#
#  MyMethod:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      AuthorizationType: NONE
#      HttpMethod: GET
#      ResourceId: !Ref MyResource
#      RestApiId: !Ref MyApi
#      Integration:
#        Type: MOCK
#        IntegrationResponses:
#          - StatusCode: 200
#        PassthroughBehavior: WHEN_NO_MATCH
#        RequestTemplates:
#          application/json: '{"statusCode": 200}'
#      MethodResponses:
#        - StatusCode: 200
#
#  MyDeployment:
#    Type: AWS::ApiGateway::Deployment
#    DependsOn: MyMethod
#    Properties:
#      RestApiId: !Ref MyApi
#      StageName: prod
#
#  MyUsagePlan:
#    Type: AWS::ApiGateway::UsagePlan
#    Properties:
#      ApiStages:
#        - ApiId: !Ref MyApi
#          Stage: !Ref MyDeployment
#      Description: A basic usage plan
#      UsagePlanName: MyUsagePlan
#
#  MyApiKey:
#    Type: AWS::ApiGateway::ApiKey
#    Properties:
#      Enabled: true
#      GenerateDistinctId: true
#      Name: MyApiKey
#      StageKeys:
#        - RestApiId: !Ref MyApi
#          StageName: prod
#
#          AWSTemplateFormatVersion: '2010-09-09'

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaFunction
      Handler: index.handler
      Role: arn:aws:iam::316328384763:role/LambdaExecutionRole
      Code:
        S3Bucket: rest-api-test-artifacts-316328384763-us-east-1
        S3Key: source/lambdas/lambda_function.zip
      Runtime: python3.8
      Timeout: 60

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda Function
    Value: !GetAtt MyLambdaFunction.Arn



