AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  DBInstanceIdentifier:
    Description: The database instance identifier
    Type: String
    Default: rest-api-db-instance
  DBName:
    Description: The name of the database
    Type: String
    Default: RestApiDBInstance
  MasterUsername:
    Description: The master username for the database
    Type: String
    Default: admin
  MasterUserPassword:
    Description: The master password for the database
    Type: String
    Default: adminadmin
    NoEcho: true
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.m5.large
    ConstraintDescription: Must be a valid RDS DB instance class.
  AllocatedStorage:
    Description: The size of the database (Gb)
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 65536
    ConstraintDescription: Must be between 20 and 65536 GB.
  VPCSecurityGroupIds:
    Description: The VPC security groups to assign to the RDS instance
    Type: List<AWS::EC2::SecurityGroup::Id>
    Default: sg-016569f907c4f7c22
  DBSubnetGroupName:
    Description: The subnet group for the database
    Type: String
    Default: default-vpc-09b1c5d0158a329a3
  ProjectName:
    Type: "String"
    Default: "rest-api-test"
  DeploymentBucketName:
    Type: "String"
    Default: "rest-api-deployment-${AWS::AccountId}-us-east-1"
    Description: Enter the existing AWS bucket were the artifacts for deployment are uploaded.

Resources:
  LandingDataBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${ProjectName}-data-landing-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: "datalake"
          Value: !Ref ProjectName

  GlueTempBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${ProjectName}-glue-temp-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldObjects
            Prefix: glue/
            Status: Enabled
            ExpirationInDays: 1
      Tags:
        - Key: "datalake"
          Value: !Ref ProjectName

  ArtifactsBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${ProjectName}-artifacts-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Prefix: /
            Status: Enabled
            ExpiredObjectDeleteMarker: True
            NoncurrentVersionExpiration:
              NoncurrentDays: 7
      Tags:
        - Key: "datalake"
          Value: !Ref ProjectName

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBName: !Ref DBName
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref AllocatedStorage
      Engine: "mysql"
      EngineVersion: "8.0.35"
      VPCSecurityGroups: !Ref VPCSecurityGroupIds
      DBSubnetGroupName: !Ref DBSubnetGroupName
      PubliclyAccessible: false
      StorageEncrypted: false
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "07:00-09:00"
      Port: 3306
      OptionGroupName: default:mysql-8-0
      DBParameterGroupName: default.mysql8.0
      MonitoringInterval: 60
      MonitoringRoleArn: "arn:aws:iam::316328384763:role/rds-monitoring-role"
      AutoMinorVersionUpgrade: true
      DeletionProtection: false

  RestApiChallenge:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RestApiChallenge
      Description: Rest API Challenge
      EndpointConfiguration:
        Types:
          - REGIONAL

  RestApiChallengeStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiChallenge.RootResourceId
      PathPart: 'status'
      RestApiId: !Ref RestApiChallenge
      
  GetStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref RestApiChallengeStatusResource
      RestApiId: !Ref RestApiChallenge
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:316328384763:function:RestApiLambdaFunction/invocations
      MethodResponses:
        - StatusCode: 200

  RestApiLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RestApiLambdaFunction
      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::316328384763:role/LambdaExecutionRole
      Code:
        S3Bucket: rest-api-test-artifacts-316328384763-us-east-1
        S3Key: source/lambdas/lambda_function.zip 
      Runtime: python3.8
      Environment:
        Variables:
          RDS_HOST: "rest-api-db-instance.cx486wyu2r7m.us-east-1.rds.amazonaws.com"
          DB_USERNAME: "admin"
          DB_PASSWORD: "adminadmin"
          DB_NAME: "hr_management"
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - sg-0f0938d2cdd1bf385
          - sg-033d9561310ac6fd7
          - sg-016569f907c4f7c22
        SubnetIds:
          - subnet-0491940360c9b214f
          - subnet-05382ea73873952fb
          - subnet-099eb71f9901fd732
          - subnet-05d359dfa5fcb186d
          - subnet-06c2b2491b1f6017a
          - subnet-0b40f85ee892dff81

  GlueJobTablesLanding2DBInstance:
    Type: AWS::Glue::Job
    Properties:
      Name: !Sub "${ProjectName}-tables-landing-to-db-job"
      Role: Glue-Admin-Role
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${ArtifactsBucket}/source/glue-scripts/tables-landing-2-db-job.py"
        PythonVersion: 3
      DefaultArguments:
        --TempDir: !Sub "s3://${GlueTempBucket}/glue/${ProjectName}/tables-landing-2-db-job/"
        --spark-event-logs-path: !Sub "s3://${GlueTempBucket}/glue/${ProjectName}/tables-landing-2-db-job/sparkHistoryLogs/"
        --job-language: python
        --job-bookmark-option: job-bookmark-disable
        --enable-metrics: true
        --enable-continuous-cloudwatch-log: true
        --enable-spark-ui: true
        --enable-glue-datacatalog: ""
      ExecutionClass: FLEX
      WorkerType: G.1X
      NumberOfWorkers: 2
      GlueVersion: 4.0
      MaxRetries: 0
      Timeout: 30

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda Function
    Value: !GetAtt RestApiLambdaFunction.Arn

